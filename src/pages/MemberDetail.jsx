import React, { useState } from 'react'
import { useParams, Link } from 'react-router-dom'
import { useTranslation } from 'react-i18next'
import { motion } from 'framer-motion'
import { 
  ArrowLeft, 
  User, 
  Calendar, 
  Users, 
  CheckCircle, 
  Clock,
  Plus,
  Edit,
  Trash2,
  Target,
  X
} from 'lucide-react'
import { useApp } from '../context/AppContext'

const MemberDetail = () => {
  const { id } = useParams()
  const { t } = useTranslation()
  const { 
    members, 
    teams, 
    projects, 
    role, 
    addPersonalTodo, 
    updatePersonalTodo, 
    deletePersonalTodo 
  } = useApp()
  const [newTodo, setNewTodo] = useState('')
  const [showAddForm, setShowAddForm] = useState(false)

  const member = members.find(m => m.id === parseInt(id))
  
  if (!member) {
    return (
      <div className="p-6 text-center">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          Member not found
        </h1>
        <Link to="/members" className="btn-primary">
          Back to Members
        </Link>
      </div>
    )
  }

  const memberTeam = teams.find(team => team.members.includes(member.id))
  const memberProject = memberTeam ? projects.find(p => p.id === memberTeam.projectId) : null
  const personalTodos = member.personalTodos || []

  const addTodo = () => {
    if (newTodo.trim()) {
      const newTodoItem = {
        id: Date.now(), // In a real app, this would be generated by the backend
        text: newTodo.trim(),
        completed: false
      }
      addPersonalTodo(member.id, newTodoItem)
      setNewTodo('')
      setShowAddForm(false)
    }
  }

  const toggleTodo = (todoId) => {
    const todo = personalTodos.find(t => t.id === todoId)
    if (todo) {
      updatePersonalTodo(member.id, todoId, { completed: !todo.completed })
    }
  }

  const deleteTodo = (todoId) => {
    deletePersonalTodo(member.id, todoId)
  }

  const clamp = (val) => Math.max(0, Math.min(100, val))

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  }

  return (
    <div className="p-6">
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="space-y-6"
      >
        {/* Header */}
        <motion.div variants={itemVariants} className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link
              to="/members"
              className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-gray-600 dark:text-gray-400" />
            </Link>
            <div className="flex items-center space-x-4">
              <div className="w-16 h-16 bg-primary-100 dark:bg-primary-900/30 rounded-full flex items-center justify-center">
                <span className="text-2xl font-medium text-primary-700 dark:text-primary-300">
                  {member.name.charAt(0)}
                </span>
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
                  {member.name}
                </h1>
                <p className="text-gray-600 dark:text-gray-400">
                  {t('members.memberDetails')}
                </p>
              </div>
            </div>
          </div>
          {(role === 'manager' || role === 'teamLead') && (
            <div className="flex items-center space-x-2">
              <button className="btn-secondary flex items-center space-x-2">
                <Edit className="w-4 h-4" />
                <span>Edit</span>
              </button>
              <button className="p-2 rounded-lg bg-red-100 dark:bg-red-900/30 hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors">
                <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
              </button>
            </div>
          )}
        </motion.div>

        {/* Member Overview */}
        <motion.div variants={itemVariants} className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Member Info */}
          <div className="card">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              Member Information
            </h3>
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <User className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Role</p>
                  <p className="font-medium text-gray-900 dark:text-white">{member.role}</p>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <Users className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Team</p>
                  <p className="font-medium text-gray-900 dark:text-white">
                    {memberTeam?.name || 'No team assigned'}
                  </p>
                </div>
              </div>
              {memberProject && (
                <div className="flex items-center space-x-3">
                  <Target className="w-5 h-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-600 dark:text-gray-400">Project</p>
                    <p className="font-medium text-gray-900 dark:text-white">{memberProject.name}</p>
                  </div>
                </div>
              )}
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Current Tasks</p>
                  <p className="font-medium text-gray-900 dark:text-white">{member.tasks?.length || 0}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Progress Overview */}
          <div className="card">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              {t('members.progress')}
            </h3>
            <div className="space-y-4">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                    Personal Todo Completion
                  </span>
                  <span className="text-lg font-bold text-gray-900 dark:text-white">
                    {personalTodos.length > 0 ? clamp((personalTodos.filter(t => t.completed).length / personalTodos.length) * 100) : 0}%
                  </span>
                </div>
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ width: `${personalTodos.length > 0 ? clamp((personalTodos.filter(t => t.completed).length / personalTodos.length) * 100) : 0}%` }}
                  />
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <Clock className="w-5 h-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Active Todos</p>
                  <p className="font-medium text-gray-900 dark:text-white">
                    {personalTodos.filter(t => !t.completed).length} remaining
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="card">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
              Quick Actions
            </h3>
            <div className="space-y-3">
              <button className="w-full btn-secondary text-left">
                View Team Dashboard
              </button>
              <button className="w-full btn-secondary text-left">
                Update Profile
              </button>
              <button className="w-full btn-secondary text-left">
                Request Time Off
              </button>
            </div>
          </div>
        </motion.div>

        {/* Current Tasks */}
        <motion.div variants={itemVariants} className="card">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            {t('members.currentTasks')}
          </h3>
          <div className="space-y-3">
            {member.tasks?.map((taskId) => {
              // In a real app, you'd fetch task details
              const taskText = `Task ${taskId} - Project work`
              return (
                <div key={taskId} className="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <input
                    type="checkbox"
                    className="w-4 h-4 text-primary-600 rounded focus:ring-primary-500"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">
                    {taskText}
                  </span>
                </div>
              )
            })}
            {(!member.tasks || member.tasks.length === 0) && (
              <p className="text-gray-600 dark:text-gray-400 text-center py-4">
                No current tasks assigned
              </p>
            )}
          </div>
        </motion.div>

        {/* Personal To-Do List */}
        <motion.div variants={itemVariants} className="card">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('members.personalTodo')}
            </h3>
            <button 
              onClick={() => setShowAddForm(!showAddForm)}
              className="btn-primary flex items-center space-x-2"
            >
              <Plus className="w-4 h-4" />
              <span>Add Todo</span>
            </button>
          </div>
          
          {/* Add Todo Form */}
          {showAddForm && (
            <div className="mb-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <div className="flex space-x-2">
                <input
                  type="text"
                  placeholder="Add a new todo..."
                  value={newTodo}
                  onChange={(e) => setNewTodo(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addTodo()}
                  className="flex-1 p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  autoFocus
                />
                <button
                  onClick={addTodo}
                  className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors"
                >
                  Add
                </button>
                <button
                  onClick={() => {
                    setShowAddForm(false)
                    setNewTodo('')
                  }}
                  className="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-medium transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {/* Todo List */}
          <div className="space-y-2">
            {personalTodos.map((todo) => (
              <div key={todo.id} className="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg group">
                <input
                  type="checkbox"
                  checked={todo.completed}
                  onChange={() => toggleTodo(todo.id)}
                  className="w-4 h-4 text-primary-600 rounded focus:ring-primary-500 cursor-pointer"
                />
                <span className={`text-sm flex-1 ${todo.completed ? 'line-through text-gray-500' : 'text-gray-700 dark:text-gray-300'}`}>
                  {todo.text}
                </span>
                <button
                  onClick={() => deleteTodo(todo.id)}
                  className="p-1 rounded-lg bg-red-100 dark:bg-red-900/30 hover:bg-red-200 dark:hover:bg-red-900/50 transition-colors opacity-0 group-hover:opacity-100"
                >
                  <X className="w-4 h-4 text-red-600 dark:text-red-400" />
                </button>
              </div>
            ))}
            {personalTodos.length === 0 && (
              <p className="text-gray-600 dark:text-gray-400 text-center py-8">
                No personal todos yet. Click "Add Todo" to create your first one!
              </p>
            )}
          </div>
        </motion.div>
      </motion.div>
    </div>
  )
}

export default MemberDetail 